// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: beds.sql

package execute

import (
	"context"
	"time"
	"github.com/google/uuid"
)

const createRoom = `-- name: CreateBed :one
INSERT INTO beds (id, id_room, name, status, create_at, update_at)
VALUES ($1, $2, $3, $4, $5, $6)
    RETURNING id, id_room, name, status, create_at, update_at
`

type CreateBedParams struct {
	ID       uuid.UUID
	IDRoom   string
	Name     string
	Status   string
	CreateAt time.Time
	UpdateAt time.Time
}

func (q *Queries) CreateBed(ctx context.Context, arg CreateBedParams) (Bed, error) {
	row := q.db.QueryRowContext(ctx, createRoom,
		arg.ID,
		arg.IDRoom,
		arg.Name,
		arg.Status,
		arg.CreateAt,
		arg.UpdateAt,
	)
	var i Bed
	err := row.Scan(
		&i.ID,
		&i.IDRoom,
		&i.Name,
		&i.Status,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const existByName = `-- name: ExistByName :one
SELECT EXISTS (
    SELECT 1
    FROM beds
    WHERE name = $1 AND id_room = $2
) AS exists
`

type ExistByNameParams struct {
	Name   string
	IDRoom string
}

func (q *Queries) ExistByName(ctx context.Context, arg ExistByNameParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, existByName, arg.Name, arg.IDRoom)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAllByAdmin = `-- name: GetAllByAdmin :many
SELECT id, id_room, name, status, create_at, update_at FROM beds
`

func (q *Queries) GetAllByAdmin(ctx context.Context) ([]Bed, error) {
	rows, err := q.db.QueryContext(ctx, getAllByAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bed
	for rows.Next() {
		var i Bed
		if err := rows.Scan(
			&i.ID,
			&i.IDRoom,
			&i.Name,
			&i.Status,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBedByStatus = `-- name: GetBedByStatus :many
SELECT id, id_room, name, status, create_at, update_at FROM beds
WHERE status = $1 AND id_room = $2
`

type GetBedByStatusParams struct {
	Status string
	IDRoom string
}

func (q *Queries) GetBedByStatus(ctx context.Context, arg GetBedByStatusParams) ([]Bed, error) {
	rows, err := q.db.QueryContext(ctx, getBedByStatus, arg.Status, arg.IDRoom)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bed
	for rows.Next() {
		var i Bed
		if err := rows.Scan(
			&i.ID,
			&i.IDRoom,
			&i.Name,
			&i.Status,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBedName = `-- name: UpdateBedName :exec
UPDATE beds
SET name = $1
WHERE id = $2
`

type UpdateBedNameParams struct {
	Name string
	ID   string
}

func (q *Queries) UpdateBedName(ctx context.Context, arg UpdateBedNameParams) error {
	_, err := q.db.ExecContext(ctx, updateBedName, arg.Name, arg.ID)
	return err
}

const updateBedStatus = `-- name: UpdateBedStatus :exec
UPDATE beds
SET status = $1
WHERE id = $2
`

type UpdateBedStatusParams struct {
	Status string
	ID     string
}

func (q *Queries) UpdateBedStatus(ctx context.Context, arg UpdateBedStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateBedStatus, arg.Status, arg.ID)
	return err
}
