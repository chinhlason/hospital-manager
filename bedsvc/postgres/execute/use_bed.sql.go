// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: use_bed.sql

package execute

import (
	"context"
	"time"
	"github.com/google/uuid"
)

const createUsageBed = `-- name: CreateUsageBed :exec
INSERT INTO use_bed(id, id_bed, id_record, status, create_at, end_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateUsageBedParams struct {
	ID       uuid.UUID
	IDBed    string
	IDRecord string
	Status   string
	CreateAt time.Time
	EndAt    time.Time
}

func (q *Queries) CreateUsageBed(ctx context.Context, arg CreateUsageBedParams) error {
	_, err := q.db.ExecContext(ctx, createUsageBed,
		arg.ID,
		arg.IDBed,
		arg.IDRecord,
		arg.Status,
		arg.CreateAt,
		arg.EndAt,
	)
	return err
}

const getUsageBedByBedId = `-- name: GetUsageBedByBedId :many
SELECT id, id_bed, id_record, status, create_at, end_at FROM use_bed
WHERE id_bed = $1
`

func (q *Queries) GetUsageBedByBedId(ctx context.Context, idBed string) ([]UseBed, error) {
	rows, err := q.db.QueryContext(ctx, getUsageBedByBedId, idBed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UseBed
	for rows.Next() {
		var i UseBed
		if err := rows.Scan(
			&i.ID,
			&i.IDBed,
			&i.IDRecord,
			&i.Status,
			&i.CreateAt,
			&i.EndAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsageBedInUse = `-- name: GetUsageBedInUse :one
SELECT id, id_bed, id_record, status, create_at, end_at FROM use_bed
WHERE id_bed = $1
AND status = 'IN_USE'
`

func (q *Queries) GetUsageBedInUse(ctx context.Context, idBed string) (UseBed, error) {
	row := q.db.QueryRowContext(ctx, getUsageBedInUse, idBed)
	var i UseBed
	err := row.Scan(
		&i.ID,
		&i.IDBed,
		&i.IDRecord,
		&i.Status,
		&i.CreateAt,
		&i.EndAt,
	)
	return i, err
}

const updateUsageBedStatus = `-- name: UpdateUsageBedStatus :exec
UPDATE use_bed
SET status = $1
WHERE id = $2
`

type UpdateUsageBedStatusParams struct {
	Status string
	ID     string
}

func (q *Queries) UpdateUsageBedStatus(ctx context.Context, arg UpdateUsageBedStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUsageBedStatus, arg.Status, arg.ID)
	return err
}
